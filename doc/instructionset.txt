mov rX, imm32
B0 [X]F, 00 00 00 00 //litte endian

mov rX, rX //32 bits registers
B1 [X][X]

---------------------------------

add r0, r1
A0

sub r0, r1
A2

mul r0, r1
A4

div r0, r1, //reszta r2
A6

----------------------------------

and r0, r1
A8

or r0, r1
AA

xor r0, r1
AC

not r0
AE

//unsigned shift left
sul r0, r1
C0

//unsigned shift right
sur r0, r1
C1

//signed shift left
ssl r0, r1
C2

//signed shift right
ssr r0, r1
C3

//rotate unsigned left
rul r0, r1
C4

//rotate unsigned right
rur r0, r1
C5

----------------------------------

push rX
D0 [X]F

pop rX
D2 [X]F

---------------------------------

nop rX
DA [X]F

nop imm32
DB 00 00 00 00

---------------------------------

ldr rX, rX //address, value
E0 [X][X]

str rX, rX
E2 [X][X]

---------------------------------
//IP == rX
jmp rX
F0 [X]F

//IP == imm32
jmp imm32
F1 00 00 00 00

---------------------------------

jz rX
F2 [X]F

jnz rX
F3 [X]F

jz imm32
F4 00 00 00 00

jnz imm32
F5 00 00 00 00

js rX
F6 [X]F

jns rX
F7 [X]F

js imm32
F8 00 00 00 00

jns imm32
F9 00 00 00 00